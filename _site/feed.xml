<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-11-30T14:00:11+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Dean Robinson</title><subtitle>Check out my Portfolio and Blog about the cool stuff I am doing with Python and Power BI!</subtitle><author><name>Dean Robinson</name></author><entry><title type="html">Infographic Designer in Power BI</title><link href="http://localhost:4000/blog/Infographic-Designer/" rel="alternate" type="text/html" title="Infographic Designer in Power BI" /><published>2021-11-24T00:00:00+00:00</published><updated>2021-11-24T00:00:00+00:00</updated><id>http://localhost:4000/blog/Infographic-Designer</id><content type="html" xml:base="http://localhost:4000/blog/Infographic-Designer/">&lt;blockquote&gt;
  &lt;p&gt;5 Years since it was released and I am only now realising quite how amazing this is!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I have used this tool a few times over the years but have never really grasped its capabilities. The basic use is pretty straight forward and there is quite a bit of documentation on how to create some of the more basic charts which I will list below but after some deeper investigation there are a few more advanced examples that I have been able to adapt.&lt;/p&gt;

&lt;p&gt;In terms of guidance there are a number of guide videos on You Tube which go creating fill charts using shapes and some of the more standard use for instance these ones from Curbal: &lt;a href=&quot;https://www.youtube.com/watch?v=XwOIIuRg-EI&quot;&gt;#37 Easily create infographics in Power BI with infographic designer&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=3671_O2iOu0&quot;&gt;#D52 Easy and fast infographics in Power BI üìà&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.microsoft.com/en-us/research/uploads/prod/2016/07/InfoNice-Quick-Start.pdf&quot;&gt;official quick start guide&lt;/a&gt; is a really good and goes into a good level of detail on the capabilities of the tool. The videos and gallery on the &lt;a href=&quot;https://www.microsoft.com/en-us/research/project/infonice/&quot;&gt;original research site&lt;/a&gt; give a great overview of capabilities and I will embed a few of the most interesting below.&lt;/p&gt;

&lt;h4 id=&quot;demo-video&quot;&gt;&lt;a href=&quot;https://youtu.be/QyxQ-ceN1d8&quot;&gt;Demo Video&lt;/a&gt;&lt;/h4&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/QyxQ-ceN1d8&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h4 id=&quot;demo-video-1&quot;&gt;&lt;a href=&quot;https://youtu.be/H8sRlqEYf7c&quot;&gt;Demo Video&lt;/a&gt;&lt;/h4&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/H8sRlqEYf7c&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h4 id=&quot;demo-video-2&quot;&gt;&lt;a href=&quot;https://youtu.be/AUxc_E3idSY&quot;&gt;Demo Video&lt;/a&gt;&lt;/h4&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/AUxc_E3idSY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;some-of-my-ideas&quot;&gt;Some of My Ideas&lt;/h3&gt;

&lt;h4 id=&quot;custom-icon-line-chart&quot;&gt;Custom Icon Line Chart&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/posts/2021-11-24-LineChart.webp&quot; alt=&quot;image-center&quot; /&gt;
This is an quick example that I have created using the line chart option and overlaying a custom shape which I then bound to the Month which is the X-Axis of my chart. This allows you to customise the shape used and in the case of the above I have manually set these to represent weather to present seasonality but this could be useful for things like identifying the start of a global pandemic or lockdowns (to pull random hypothetical scenarios from the air).&lt;/p&gt;

&lt;h4 id=&quot;category-picture-charts&quot;&gt;Category Picture Charts&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/posts/2021-11-24-BarChart.webp&quot; alt=&quot;image-center&quot; /&gt;&lt;/p&gt;</content><author><name>Dean Robinson</name></author><category term="Blog" /><category term="Power BI" /><category term="Infographic Designer" /><category term="Advanced Visual" /><summary type="html">Resources and experience of using the Infographic Designer custom visual in Power BI</summary></entry><entry><title type="html">Creating my New Blog!</title><link href="http://localhost:4000/news/My-New-Blog/" rel="alternate" type="text/html" title="Creating my New Blog!" /><published>2021-11-12T00:00:00+00:00</published><updated>2021-11-27T00:00:00+00:00</updated><id>http://localhost:4000/news/My-New-Blog</id><content type="html" xml:base="http://localhost:4000/news/My-New-Blog/">&lt;blockquote&gt;
  &lt;p&gt;‚ÄúWhen Alexander saw the breadth of his domain, he wept, for there were no more worlds to conquer‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It has been a few weeks since my first commit on the .io github repo for this site and it has been a really interesting learning experience which I would highly recommend‚Ä¶ assuming that you already have quite a good grasp of HTML.&lt;/p&gt;

&lt;h3 id=&quot;github-pages&quot;&gt;Github Pages&lt;/h3&gt;

&lt;h3 id=&quot;jekyll--ruby&quot;&gt;Jekyll &amp;amp; Ruby&lt;/h3&gt;

&lt;h3 id=&quot;minimal-mistakes&quot;&gt;Minimal Mistakes&lt;/h3&gt;

&lt;h3 id=&quot;customisation&quot;&gt;Customisation&lt;/h3&gt;</content><author><name>Dean Robinson</name></author><category term="News" /><category term="Jekyll" /><category term="Ruby" /><category term="GitHub" /><summary type="html">Update on the new blog and portfolio using Jekyll and GitHub</summary></entry><entry><title type="html">Shape Maps in Power BI</title><link href="http://localhost:4000/blog/Shape-Maps/" rel="alternate" type="text/html" title="Shape Maps in Power BI" /><published>2021-03-09T00:00:00+00:00</published><updated>2021-03-09T00:00:00+00:00</updated><id>http://localhost:4000/blog/Shape-Maps</id><content type="html" xml:base="http://localhost:4000/blog/Shape-Maps/">&lt;blockquote&gt;
  &lt;p&gt;Thought it was about time to get in shape&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a bit of a tangent but wanted to share useful links as this is something that I have pulled together with multiple sources and not something that I could find a joined view of.&lt;/p&gt;

&lt;p&gt;So maps are tricky. Getting your data in the right format, right place and most difficult correct shape is really difficult. One approach is to focus only on getting your data in the right place by using latitude and longitude to plot data in the correct places but shape maps are definitely the best way to present data about geographies such as Countries, Regions, Local Authorities, Postcode Areas etc.&lt;/p&gt;

&lt;p&gt;Out of the box there are a few shape maps like US states, UK countries but for my purposes I need shape maps for Local Authorities, Postcode Areas, Regions and other geographic distributions inside the UK. Custom maps can be loaded and as &lt;a href=&quot;https://docs.microsoft.com/en-us/power-bi/visuals/desktop-shape-map#use-custom-maps&quot;&gt;this article&lt;/a&gt; says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚ÄúYou can use custom maps with Shape Map as long as they are in the TopoJSON format. If your map is in another format, you can use online tools such as &lt;a href=&quot;https://mapshaper.org/&quot;&gt;Map Shaper&lt;/a&gt; to convert your shapefiles or your GeoJSON maps into the TopoJSON format.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Power Maps (plugin for excel) this is achieved through Shape or KML files but in here we need TopoJSON. On the &lt;a href=&quot;https://geoportal.statistics.gov.uk/&quot;&gt;ONS Geoportal&lt;/a&gt; you need to go to the APIs rather than downloads for the GeoJSON link for whichever boundary you are wanting. Going to the URL and saving the JSON file locally you can then load it into &lt;a href=&quot;https://mapshaper.org/&quot;&gt;Map Shaper&lt;/a&gt; and export as TopoJSON in the top right hand corner.&lt;/p&gt;

&lt;p&gt;So that gives you any boundary published by the ONS as a format that can be loaded into Power BI, from a bit of testing the associated shape data can be matched according to any of the parameters so for Local Authority that is the JSON file ID, Local Authority Code or Local Authority name which is pretty helpful.&lt;/p&gt;

&lt;p&gt;So that is all great until you rightealise that the latest boundary map (at time of writing) is the 2019 Local Authority list and the latest local authority list is 2020 which includes the merging of Aylesbury Vale, Chiltern, South Bucks and Wycombe into Buckinghamshire Local Authority and my data is aligned to the 2020 list. I was able to use &lt;a href=&quot;https://help.flourish.studio/article/187-how-to-merge-regions-with-mapshaper&quot;&gt;this guide&lt;/a&gt; to merge together the old local authority boundaries and adapt this one to create field names for the new shape then re-join the maps and‚Ä¶
&lt;img src=&quot;http://localhost:4000/assets/images/posts/2021-03-09-Comparison.webp&quot; alt=&quot;image-center&quot; /&gt;
So a bit of a tangent but useful set of tools to be able to use shape maps for the geographies that I need and something that can be built on in the future if I need to do something like creating custom region maps that are not available from the ONS.&lt;/p&gt;</content><author><name>Dean Robinson</name></author><category term="Blog" /><category term="Power BI" /><category term="Advanced Visual" /><category term="Geomaping" /><category term="ONS" /><summary type="html">How to use ONS Local Authority shape maps in Power BI and how to create custom maps based of existing.</summary></entry><entry><title type="html">VADER and Power BI</title><link href="http://localhost:4000/blog/VADER-and-PowerBI/" rel="alternate" type="text/html" title="VADER and Power BI" /><published>2021-03-03T00:00:00+00:00</published><updated>2021-03-03T00:00:00+00:00</updated><id>http://localhost:4000/blog/VADER-and-PowerBI</id><content type="html" xml:base="http://localhost:4000/blog/VADER-and-PowerBI/">&lt;blockquote&gt;
  &lt;p&gt;‚ÄúSearch your feelings. you know it to be true‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Valence Aware Dictionary and sEntiment Reasoner (&lt;a href=&quot;https://github.com/cjhutto/vaderSentiment&quot;&gt;VADER&lt;/a&gt;) is the main alternative to TextBlob and is designed to work with social media text primarily.&lt;/p&gt;

&lt;p&gt;Again this has been a really simple adaptation of the code used so far in all of the text analytics tools we have applied.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/cjhutto/vaderSentiment#about-the-scoring&quot;&gt;outputs&lt;/a&gt; of VADER are a little different to TextBlob and does not include scoring for subjectivity but does break down into 4 aspects the Compound Score which is the key sentiment scale but also individual scores for pos: positive, neu: neural and neg:negative that are ratios of the proportion of the text analysed so you can drill into a bit more context.&lt;/p&gt;

&lt;p&gt;TextBlob in Power BI&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;vaderSentiment.vaderSentiment&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SentimentIntensityAnalyzer&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;analyser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SentimentIntensityAnalyzer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterrows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analyser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polarity_scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;row_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;compound&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;neg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;neu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'compound'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'negative'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'neutral'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'positive'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Comparison with TextBlob
So the sample data I have been using in my template is thousands of tweets so it is no surprise that for that data VADER seems to have an advantage over TextBlob:
&lt;img src=&quot;http://localhost:4000/assets/images/posts/2021-03-03-Comparison.webp&quot; alt=&quot;image-center&quot; /&gt;
On other data I have tested on TextBlob has the advantage when comparing against a satisfaction score within the data but this is also very different to social media forms of data.&lt;/p&gt;

&lt;p&gt;The other key consideration is that this is the out of the box use of both tools with stop words and further customisation it is likely that a great deal more accuracy can be gained for both tools.&lt;/p&gt;</content><author><name>Dean Robinson</name></author><category term="Blog" /><category term="Python" /><category term="Natural Language Processing" /><category term="Power BI" /><category term="VADER" /><category term="pandas" /><summary type="html">How to use VADER in Python to analyse sentiment in PowerBI</summary></entry><entry><title type="html">TextBlob and Power BI</title><link href="http://localhost:4000/blog/TextBlob-and-PowerBI/" rel="alternate" type="text/html" title="TextBlob and Power BI" /><published>2021-03-01T00:00:00+00:00</published><updated>2021-03-01T00:00:00+00:00</updated><id>http://localhost:4000/blog/TextBlob-and-PowerBI</id><content type="html" xml:base="http://localhost:4000/blog/TextBlob-and-PowerBI/">&lt;blockquote&gt;
  &lt;p&gt;TextBlob makes me polarity:1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Expanding text capabilities with Sentiment in Power BI is one of the key things I have always wanted to be able to do. The code for this is pretty much the same as covered previously and as with all of the tools I have covered so far this is the most basic application of each tool - there is a lot more that can  be done with further customisation based on the types of data you are working with.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://textblob.readthedocs.io/en/dev/&quot;&gt;TextBlob&lt;/a&gt; is a Natural Language Processing tool (NLP) to identify the sentiment (polarity) of a text string on a scale of -1 (negative) to 1 (positive). As well as sentiment you can export a subjectivity score on a scale of 0 (objective) to 1 (subjective) which can be a really useful way of exploring your and the correlation between sentiment and subjectivity.&lt;/p&gt;
&lt;h3 id=&quot;textblob-in-power-bi&quot;&gt;TextBlob in Power BI&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;textblob&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;textblob&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextBlob&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#create a for loop of the rows in the df dataframe
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterrows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#checks to see if the value in text is a string i.e. contains data if so continue
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#blob is the results of the current text value
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;blob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextBlob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;row_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polarity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subjectivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'polarity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'subjectivity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Dean Robinson</name></author><category term="Blog" /><category term="Python" /><category term="Natural Language Processing" /><category term="Power BI" /><category term="TextBlob" /><category term="pandas" /><category term="Sentiment" /><summary type="html">How to use TextBlob in Python to bring sentiment analysis to Power BI</summary></entry><entry><title type="html">RAKE in Power BI</title><link href="http://localhost:4000/blog/RAKE/" rel="alternate" type="text/html" title="RAKE in Power BI" /><published>2021-02-26T00:00:00+00:00</published><updated>2021-02-26T00:00:00+00:00</updated><id>http://localhost:4000/blog/RAKE</id><content type="html" xml:base="http://localhost:4000/blog/RAKE/">&lt;blockquote&gt;
  &lt;p&gt;I like Python but it needs more acronyms&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post I am going to go through the basic use of Rapid Automatic Keyword Extraction (RAKE) using the Natural Language Tool Kit (NLTK) as documented &lt;a href=&quot;https://pypi.org/project/rake-nltk/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So before we get into RAKE what is NLTK? It is a set of tools that do some quite similar stuff to Natural Language Processing as used in the spaCy Position of Speech (POS) and Named Entity Recognition (NER) tools that are explored &lt;a href=&quot;https://drdataanalysis.github.io/blog/Lost-in-spaCy/&quot;&gt;here&lt;/a&gt;. Essentially the tools break down text into their component parts for scripts like RAKE, POS, NER to return results based on analysis of those components.&lt;/p&gt;

&lt;p&gt;What is RAKE? This tool extracts key words and phrases based on frequency and without any understanding of the context of the text being analysed. This makes it quite a general tool that will not work well with all text sources but like POS and NER is a good exploratory tool and may work well when joined up to other information about the text data. As an example I have found that using Named Entity Labels and RAKE outputs works well in Power BI.&lt;/p&gt;

&lt;p&gt;I have not included the same degree of comments as in previous posts because the code here is pretty much the same so please refer to &lt;a href=&quot;https://drdataanalysis.github.io/blog/NLP-in-PowerBI/&quot;&gt;this post&lt;/a&gt; to understand the context of what each step is doing. These examples are also still based on the same assumption of the data used as in previous posts i.e. two columns ‚Äúid‚Äù and ‚Äútext‚Äù.&lt;/p&gt;
&lt;h3 id=&quot;rake-example-for-jupyter&quot;&gt;RAKE Example for Jupyter&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;nltk&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rake_nltk&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rake&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'../templates/data/Text Small Example.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterrows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rake&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract_keywords_from_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#doc = nlp(row['text'])
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phrase&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_ranked_phrases_with_scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;row_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phrase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'phrase'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'score'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rake-example-for-power-bi&quot;&gt;RAKE Example for Power BI&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;nltk&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rake_nltk&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rake&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterrows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rake&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract_keywords_from_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#doc = nlp(row['text'])
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phrase&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_ranked_phrases_with_scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;row_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phrase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'phrase'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'score'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Hopefully it is clear from the above example that not much needs to change when using Python in Power BI. As mentioned in my &lt;a href=&quot;https://drdataanalysis.github.io/blog/NLP-in-PowerBI/&quot;&gt;previous post&lt;/a&gt; a change of mindset to think of data frames as the outputs rather than print, visuals or export.&lt;/p&gt;</content><author><name>Dean Robinson</name></author><category term="Blog" /><category term="Python" /><category term="NLTK" /><category term="Power BI" /><category term="RAKE" /><category term="pandas" /><summary type="html">How to use Rapid Automatic Keyword Extraction (RAKE) using the Natural Language Tool Kit (NLTK) in Python</summary></entry><entry><title type="html">NLP in PowerBI</title><link href="http://localhost:4000/blog/NLP-in-PowerBI/" rel="alternate" type="text/html" title="NLP in PowerBI" /><published>2021-02-25T00:00:00+00:00</published><updated>2021-02-25T00:00:00+00:00</updated><id>http://localhost:4000/blog/NLP-in-PowerBI</id><content type="html" xml:base="http://localhost:4000/blog/NLP-in-PowerBI/">&lt;blockquote&gt;
  &lt;p&gt;With great Power BI comes great responsibility&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;it-is-time-power-bi--python--amazing&quot;&gt;It is time: Power BI + Python = Amazing!&lt;/h3&gt;

&lt;p&gt;It worked, it is relatively easy to convert the code to run within Power BI. The main thing that changes is the emphasis of using print() or exporting data in some ways things are easier in that you just need to update or create data frames so üêºs is key‚Ä¶ Pandas.&lt;/p&gt;

&lt;p&gt;In terms of a step by step guide the first thing I did was get the code working in Jupyter as a proof that the code will execute successfully.&lt;/p&gt;

&lt;p&gt;Following on from &lt;a href=&quot;https://drdataanalysis.github.io/blog/Lost-in-spaCy/&quot;&gt;using spaCy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you add a Python Script to a Power BI Query it basically takes the data as it stands in the previous step and converts it to a data frame called dataset. &lt;strong&gt;This means that for the code I had for spaCy the name ‚Äúdf‚Äù needed to be changed to ‚Äúdataset‚Äù.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The other thing that needs to be different is what you do with the outputs of your code. I previously was printing out the values to test that it was working which does not work with what we need for Power BI. Another common way of using python is to output to a CSV or summarize in a visual but again this is not something that we want to do when using Python scripts with Power BI Queries (Python with visuals is a whole other conversation). The solution is to either update a the dataset data frame or to create a new dataframe that stores your outputs. In the case of NLP we are taking text and splitting it up into component parts as rows so outputting to a new dataframe is the easiest way to do this - the advantage with Power BI is that you can always load your data in as another table an join your Python powered query outputs back to it which is really useful.&lt;/p&gt;

&lt;p&gt;I created a list called ‚Äúdata‚Äù to store the outputs of the for loop and then a last step to create a new data frame called ‚Äúnew_df‚Äù. Hopefully the following comparison should make sense of the differences here. The other thing to mention is that I have added the dependencies above the code like you would in Jupiter but Power BI is like a standard Python Script so you need to all code needs to be in one step.&lt;/p&gt;

&lt;h3 id=&quot;previous-position-of-speech-code&quot;&gt;Previous Position of Speech Code&lt;/h3&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/a81e176f18bd11dc90f8b3ffb4b53b69.js&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;putting-this-in-power-bi&quot;&gt;Putting this in Power BI&lt;/h3&gt;
&lt;p&gt;Hopefully this next step should be simple. To get stuff running in Jupyter you will have needed to install the modules etc. so as long as Power BI is using the same Python environment that you are this should work fine.&lt;/p&gt;

&lt;p&gt;First step is to extract and load your data - this is pretty core to Power BI so I am not going to go through it other than to say that the code here is the same as with the spaCy example and expecting a inputs of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id|text&lt;/code&gt; with those headers and only those columns. If you have more columns that you want to include do it in another query and join in your data model - the same is true if you have two (or more) text columns you can either add them all as sperare queries.&lt;/p&gt;

&lt;p&gt;The source I am using is on SharePoint and is a CSV but the advantage of using Power Query on this is it is very easy to pull in data from wherever you want. The data has been processed and converted including filtering out blanks (even though the code will also check for this).&lt;/p&gt;

&lt;p&gt;Once your data looks like this:
&lt;img src=&quot;http://localhost:4000/assets/images/posts/2021-02-25-DataView.webp&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;
Click on the Transform tab and the Run Python Script button in the far right:
&lt;img src=&quot;http://localhost:4000/assets/images/posts/2021-02-25-Transform.webp&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;
Paste your code into the box that pops up and click on OK to run. Once the preview has loaded you will see a list of data frames, one is the original data set and the other is the new_df frame the script created:
&lt;img src=&quot;http://localhost:4000/assets/images/posts/2021-02-25-DataView2.webp&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;
To load the new_df data you can just click on table in the corresponding value column and that import the data frame and automatically do things like changing data types:
&lt;img src=&quot;http://localhost:4000/assets/images/posts/2021-02-25-DataView3.webp&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;
Then you can load that to your model and join it up with other data sets and if you include both way filters can do some really cool stuff:
&lt;img src=&quot;http://localhost:4000/assets/images/posts/2021-02-25-DataModel.webp&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see I have included in this template NER (code bellow), RAKE which I will do a separate posts about and TextBlob which is sentiment analysis and something that there will be many more posts about!&lt;/p&gt;
&lt;h3 id=&quot;named-entity-recognition-power-bi-code&quot;&gt;Named Entity Recognition Power BI Code&lt;/h3&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/68a5fdd61221a67cdaa575db53f1d4aa.js&quot;&gt; &lt;/script&gt;</content><author><name>Dean Robinson</name></author><category term="Blog" /><category term="Python" /><category term="Natural Language Processing" /><category term="Power BI" /><category term="spaCy" /><category term="pandas" /><summary type="html">How to use Python Natural Language Processing (NLP) in Power BI!</summary></entry><entry><title type="html">Lost in spaCy</title><link href="http://localhost:4000/blog/Lost-in-spaCy/" rel="alternate" type="text/html" title="Lost in spaCy" /><published>2021-02-24T00:00:00+00:00</published><updated>2021-02-24T00:00:00+00:00</updated><id>http://localhost:4000/blog/Lost-in-spaCy</id><content type="html" xml:base="http://localhost:4000/blog/Lost-in-spaCy/">&lt;blockquote&gt;
  &lt;p&gt;In spaCy no one can hear you scream‚Ä¶ &lt;br /&gt;when you get a Syntax error.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Experiments with &lt;a href=&quot;https://spacy.io/&quot;&gt;spaCy&lt;/a&gt; are going well in the appropriately named Jupyter notebooks.&lt;/p&gt;

&lt;p&gt;There are two spaCy Natural Language Processing (NLP) components I am working with:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Position of Speech (POS)&lt;/li&gt;
  &lt;li&gt;Named Entity Recognition&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://www.machinelearningplus.com/spacy-tutorial-nlp/&quot;&gt;This tutorial&lt;/a&gt; was really helpful in generalising the experiments I have been doing and looking at different aspects and capabilities of NLP.&lt;/p&gt;

&lt;p&gt;The idea with this is to get a general set of tools developed in a notebook before looking at adapting the code to be used in Power BI to run NLP as a step in Power Query.&lt;/p&gt;

&lt;p&gt;The big question is if you can load the NLP language library into Python running in Power BI (if not it is going to be tricky).&lt;/p&gt;

&lt;h3 id=&quot;starting-point&quot;&gt;Starting Point&lt;/h3&gt;
&lt;p&gt;So I am starting from an example here where NLP tools have been used to get an overview count of the contents of a csv of text values - which is great - but not what I need for a Power BI report to be able to explore the context of the results further so the following is simplified to just return the results of the NLP steps per result.&lt;/p&gt;

&lt;p&gt;With the following I am assuming that you know the basics of installing modules and have done some introductory Python stuff all of which is very widely available online.&lt;/p&gt;

&lt;p&gt;The notebook and files are available in this &lt;a href=&quot;https://github.com/drdataanalysis/blog_python-text-analysis&quot;&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the Notebook/ Code:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/a81e176f18bd11dc90f8b3ffb4b53b69.js&quot;&gt; &lt;/script&gt;</content><author><name>Dean Robinson</name></author><category term="Blog" /><category term="Python" /><category term="Natural Language Processing" /><category term="spaCy" /><summary type="html">Post covering getting started with spaCy in Python for Natural Language Processing (NLP)</summary></entry><entry><title type="html">Starting Py-Fun!</title><link href="http://localhost:4000/news/Starting-PyFun/" rel="alternate" type="text/html" title="Starting Py-Fun!" /><published>2021-02-22T00:00:00+00:00</published><updated>2021-02-22T00:00:00+00:00</updated><id>http://localhost:4000/news/Starting-PyFun</id><content type="html" xml:base="http://localhost:4000/news/Starting-PyFun/">&lt;h2 id=&quot;-the-idea&quot;&gt;üí° The Idea&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;I want a way to document my experiments with Python and integrating it with Azure ML and Power BI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;-the-plan&quot;&gt;üìã The Plan&lt;/h2&gt;
&lt;p&gt;I am going to blog as regularly as possible covering the Python exploration and investigation that I am doing.&lt;/p&gt;

&lt;p&gt;The plan is to help document the challenges and experience of trying to work to bring Python into the Microsoft Power Platform and processes that are used in my team. This area is something that I have not found many resources about in my work so far so I am conscious that some of this may be of help to others which is another reason to put this into a blog.&lt;/p&gt;

&lt;h2 id=&quot;-next-steps&quot;&gt;üë£ Next Steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;del&gt;Publish this post&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Start looking at Natural Language Processing in Python (using Jupyter notebooks)&lt;/li&gt;
  &lt;li&gt;Convert Jupyter code to Power BI for use in data models&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Dean Robinson</name></author><category term="News" /><category term="Python" /><category term="Power BI" /><summary type="html">Intro to the blog and the stuff I am planning to do with Python and Power BI</summary></entry></feed>